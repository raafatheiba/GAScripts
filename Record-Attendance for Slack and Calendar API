const ss = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Sheet4");
let i = 2;
let msg;
let attendees;
let cEndRow;
let c_Name;
let c_startTime;
let c_endTime;
let c_Link;
let s_Name;
let s_Email;
let s_ID;

function defineAttendees() {

  for (i; i <= ss.getDataRange().getLastRow(); i++){
    if(ss.getRange(i, 1).getDisplayValue() != ss.getRange(i-1, 1).getDisplayValue() && ss.getRange(i, 2).getDisplayValue() != ss.getRange(i-1, 2).getDisplayValue()){
      c_Name = ss.getRange(i, 1).getDisplayValue().trim();
      c_startTime = ss.getRange(i, 2).getDisplayValue();
      c_endTime = ss.getRange(i, 3).getDisplayValue();
    
      for(let i2 = i+1; i<ss.getDataRange().getLastRow(); i2++){
        if(ss.getRange(i2, 1).getDisplayValue() != ss.getRange(i2-1, 1).getDisplayValue() && ss.getRange(i2, 2).getDisplayValue() != ss.getRange(i2-1, 2).getDisplayValue()){
          cEndRow = i2;
          break;
        }
      }

      attendees = ss.getRange(i, 4, cEndRow-i, 3).getDisplayValues();
  
      for(var r = 0; r<attendees.length; r++){
        for(var c = 0; c<attendees[0].length; c++){
          if(c === 0){
            s_Name = attendees[r][c];
          }
          if(c === 1){
            s_Email = attendees[r][c];
          }
          if(c === 2){
            s_ID = attendees[r][c];
          }
        }

        let date = new Date(c_startTime);
        let nDate = new Date(date.getTime() - 1800000);

        if(Utilities.formatDate(nDate, "GMT+2", "yyyy-MM-dd'T'HH:mm:ss") < Utilities.formatDate(new Date(), "GMT+8", "yyyy-MM-dd'T'HH:mm:ss")){
          if(s_ID != "N/A"){
            Generate_Link();
            sendMail();
            postMessage();
          }else{
            Generate_Link();
            sendMail();
          }
        }
        console.log(s_Name + " " + s_Email + " " + s_ID);
      }     
    }
  } 
}

function Generate_Link() {
 
  const timezone = "Asia/Manila";
  
  const calendarID = "";
  
  const resource = {
    start: { dateTime: c_startTime,
    timeZone: timezone},
    end: { dateTime: c_endTime,
    timeZone: timezone},
    conferenceData: {
        createRequest: {
            requestId: "",
            conferenceSolutionKey: { type: "hangoutsMeet" },
        },
    },
    summary: c_Name,
};
const res = Calendar.Events.insert(resource, calendarID, {
conferenceDataVersion: 1,  });

c_Link = res.hangoutLink;
ss.getRange(i, 8).setValue(c_Link);
}

function postMessage() {

  msg = c_Name + " GMeet-Link", "Hi " + s_Name + ", you have a booked " + c_Name + " today at " + c_startTime.split("T")[1] + ". Here is your GMeet-Link: " + c_Link;

  const token = "";
  const open_URL = "https://slack.com/api/conversations.open";
  let id;

  let data = {
  "users" : s_ID
  };

  let options = {
  headers: {Authorization: "Bearer " + token},
    "method" : "POST",
    "contentType" : "application/json",
    "payload" : JSON.stringify(data)
  };

  let res = UrlFetchApp.fetch(open_URL, options)
  var jString = JSON.parse(res.getContentText());

  id = jString.channel.id;

  const post_URL = "https://slack.com/api/chat.postMessage";

  data = {
  "channel" : id,
  "text" : msg
  };

  options = {
    headers: {Authorization: "Bearer " + token},
    "method" : "POST",
    "contentType" : "application/json",
    "payload" : JSON.stringify(data)
  };

  res = UrlFetchApp.fetch(post_URL, options)
} 

function sendMail(){

  GmailApp.sendEmail(s_Email, msg);
}
